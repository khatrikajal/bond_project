# # /root/bond_platform/Backend/config/settings/base.py
# """
# Django settings for config project.

# Generated by 'django-admin startproject' using Django 5.2.6.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path
# import os
# from dotenv import load_dotenv
# from datetime import timedelta
# from celery.schedules import crontab

# import environ

# env = environ.Env()
# environ.Env.read_env()

# # from celery.schedules import crontab

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

# APPS_DIR = BASE_DIR / "apps"

# local_env_file = os.path.join(BASE_DIR, "envs", ".env.local")

# if os.path.isfile(local_env_file):
#     load_dotenv(local_env_file)



# # Application definition

# DJANGO_APPS = [
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
#     "django.contrib.sites",
#     "django.contrib.humanize",
# ]

# THIRD_PARTY_APPS = [
#     "rest_framework",
#     "django_countries",
#     "phonenumber_field",
#     "drf_spectacular",
#     "djoser",
#     "cloudinary",
#     "django_filters",
#     # "djcelery_email",
#     "django_celery_beat",
#     "rest_framework_simplejwt",
#     "corsheaders",
# ]

# LOCAL_APPS = [
#     "apps.authentication",
#     "apps.bonds",
#     "apps.compliance", 
#     "apps.dashboard",
#     "apps.investments",
#     "apps.notifications",
#     "apps.payments",
#     "apps.regulatory",
#     "apps.reporting",
#     "apps.risk_management",
#     "apps.settlement",
#     "apps.trading",
# ]

# INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# # AUTH_USER_MODEL = 'authentication.User'

# SITE_ID = 1

# MIDDLEWARE = [
#     "django.middleware.security.SecurityMiddleware",
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     'corsheaders.middleware.CorsMiddleware',
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
#     "config.middleware.IgnoreBadHostMiddleware",
#     "config.middleware.RequestLoggingMiddleware",

# ]

# ROOT_URLCONF = "config.urls"

# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [str(APPS_DIR / "templates")],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = "config.wsgi.application"


# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# # Database
# # DATABASES = {
# #     'default': {
# #         'ENGINE': 'django.db.backends.postgresql',
# #         'NAME': config('DB_NAME', default='bond_platform'),
# #         'USER': config('DB_USER', default='bond_user'),
# #         'PASSWORD': config('DB_PASSWORD', default='bond_password'),
# #         'HOST': config('DB_HOST', default='localhost'),
# #         'PORT': config('DB_PORT', default='5432'),
# #     }
# # }
# # Database Configuration with PostgreSQL
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("POSTGRES_DB", "bond_platform"),
#         "USER": os.getenv("POSTGRES_USER", "bond_user"), 
#         "PASSWORD": os.getenv("POSTGRES_PASSWORD", "bond_password"),
#         "HOST": os.getenv("POSTGRES_HOST", "localhost"),
#         "PORT": os.getenv("POSTGRES_PORT", "5432"),
#         # "OPTIONS": {
#         #     'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#         # },
#         "CONN_MAX_AGE": 60,  # Connection pooling
#     }
# }

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",  # ← changed
#         "LOCATION": os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1"),
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#         "KEY_PREFIX": "bond_platform",
#         "TIMEOUT": 300,
#     },
#     "otp": {
#         "BACKEND": "django_redis.cache.RedisCache",  # ← changed
#         "LOCATION": os.getenv("REDIS_URL", "redis://127.0.0.1:6379/2"),
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#         "KEY_PREFIX": "otp",
#         "TIMEOUT": 600,
#     }
# }




# # Fallback to SQLite for development if PostgreSQL is not available
# if os.getenv("USE_SQLITE", "False").lower() == "true":
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.sqlite3",
#             "NAME": BASE_DIR / "db.sqlite3",
#         }
#     }

# PASSWORD_HASHERS = [
#     "django.contrib.auth.hashers.Argon2PasswordHasher",
#     "django.contrib.auth.hashers.PBKDF2PasswordHasher",
#     "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
#     "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
#     "django.contrib.auth.hashers.ScryptPasswordHasher",
# ]

# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"

# USE_I18N = True

# USE_TZ = True




# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/

# # STATIC
# # ------------------------------------------------------------------------------
# STATIC_ROOT = str(BASE_DIR / "staticfiles")
# STATIC_URL = "/static/"
# STATICFILES_DIRS = [str(APPS_DIR / "static")]
# STATICFILES_FINDERS = [
#     "django.contrib.staticfiles.finders.FileSystemFinder",
#     "django.contrib.staticfiles.finders.AppDirectoriesFinder",
# ]

# # Media files
# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# # LOGGING
# # ------------------------------------------------------------------------------
# # settings.py

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "verbose": {
#             "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",  # noqa: E501
#         },
#     },
#     "handlers": {
#         "console": {
#             "level": "DEBUG",
#             "class": "logging.StreamHandler",
#             "formatter": "verbose",
#         },
#     },
#     "root": {"level": "INFO", "handlers": ["console"]},
# }

# # Celery
# # ------------------------------------------------------------------------------
# if USE_TZ:
#     CELERY_TIMEZONE = TIME_ZONE

# # Don’t use DEBUG here – only rely on env
# CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# CELERY_RESULT_EXTENDED = True
# CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
# CELERY_RESULT_BACKEND_MAX_RETRIES = 10
# CELERY_ACCEPT_CONTENT = ["json"]
# CELERY_TASK_SERIALIZER = "json"
# CELERY_RESULT_SERIALIZER = "json"
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_TIME_LIMIT = 5 * 60
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_SOFT_TIME_LIMIT = 60
# CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# CELERY_WORKER_SEND_TASK_EVENTS = True
# CELERY_TASK_SEND_SENT_EVENT = True
# # CELERY_BEAT_SCHEDULE = {
# #     "fetch-daily-analytics": {
# #         "task": "apps.stats.tasks.fetch_daily_analytics",
# #         "schedule": crontab(hour=18, minute=33),  # Run daily at 2 AM
# #     },
# #     "clear-old-analytics-cache": {
# #         "task": "apps.stats.tasks.clear_old_analytics_cache",
# #         "schedule": crontab(hour=3, minute=0),  # Run daily at 3 AM
# #     },
# # }



# CELERY_BEAT_SCHEDULE = {
#     # OTP cleanup tasks
#     "cleanup-expired-otp-requests": {
#         "task": "apps.authentication.tasks.cleanup_expired_otp_requests",
#         "schedule": crontab(minute="*/15"),  # Run every 15 minutes
#     },
#     "cleanup-old-otp-records": {
#         "task": "apps.authentication.tasks.cleanup_old_otp_records",
#         "schedule": crontab(hour=2, minute=30),  # Run daily at 2:30 AM
#         "kwargs": {"days_old": 30},
#     },
#     "generate-otp-analytics-report": {
#         "task": "apps.authentication.tasks.generate_otp_analytics_report",
#         "schedule": crontab(hour=8, minute=0),  # Run daily at 8:00 AM
#         "kwargs": {"days": 7},
#     },

# }
# # -------------------------
# # Django REST Framework
# # -------------------------
# REST_FRAMEWORK = {
#     # Custom JWT authentication from cookies
#     "DEFAULT_AUTHENTICATION_CLASSES": (
#         "config.authentication.CookieJWTAuthentication",
#     ),
#     # Render only JSON in production (no BrowsableAPIRenderer)
#     "DEFAULT_RENDERER_CLASSES": [
#         "rest_framework.renderers.JSONRenderer",
#         # "rest_framework.renderers.BrowsableAPIRenderer",  # Enable only in development
#     ],
#     # Pagination
#     # "DEFAULT_PAGINATION_CLASS": "core.pagination.StandardResultsSetPagination",
#     # "PAGE_SIZE": 20,
#     # # Filtering & Ordering
#     # "DEFAULT_FILTER_BACKENDS": [
#     #     "django_filters.rest_framework.DjangoFilterBackend",
#     #     "rest_framework.filters.SearchFilter",
#     #     "rest_framework.filters.OrderingFilter",
#     # ],
#     # Throttling
#     "DEFAULT_THROTTLE_CLASSES": [
#         "rest_framework.throttling.ScopedRateThrottle",
#         "config.throttling.OpenAPIsThrottle",
#     ],
#     "DEFAULT_THROTTLE_RATES": {
#         "anon": "5/second",
#         "registration_otp": "5/hour",
#         "open_apis": "60/minute",
#     },
#     # Permissions: all APIs require authentication by default
#     "DEFAULT_PERMISSION_CLASSES": (
#         "rest_framework.permissions.IsAuthenticated",
#     ),
#     # OpenAPI/Schema
#     "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
#     # Custom exception handler
#     "EXCEPTION_HANDLER": "config.exceptions.custom_exception_handler",
#     # Datetime format
#     "DATETIME_FORMAT": "%d-%m-%y %H:%M:%S",
# }

# # -------------------------
# # Simple JWT for cookie-based auth
# # -------------------------
# # JWT Settings

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),  # Reduced from 10 days
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),      # Reduced from 30 days
#     "ROTATE_REFRESH_TOKENS": True,
#     "BLACKLIST_AFTER_ROTATION": True,
#     "UPDATE_LAST_LOGIN": False,  # Changed to False for better performance
#     "ALGORITHM": "HS256",  # Changed from RS256 to HS256
#     "SIGNING_KEY": None,   # Will be set in environment-specific settings
#     "VERIFYING_KEY": None,
#     "AUDIENCE": None,
#     "ISSUER": None,
#     "JWK_URL": None,
#     "LEEWAY": 0,
#     "AUTH_HEADER_TYPES": ("Bearer",),
#     "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
#     "TOKEN_TYPE_CLAIM": "token_type",
#     "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
#     "USER_ID_FIELD": "id",
#     "USER_ID_CLAIM": "user_id",
#     "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
#     "AUTH_COOKIE": "access_token",
#     "AUTH_COOKIE_REFRESH": "refresh_token", 
#     "AUTH_COOKIE_DOMAIN": None,  # Will be set per environment
#     "AUTH_COOKIE_SECURE": False, # Will be overridden in production
#     "AUTH_COOKIE_HTTP_ONLY": True,
#     "AUTH_COOKIE_PATH": "/",
#     "AUTH_COOKIE_SAMESITE": "Lax",
# }


# #   CORS settings
# # CORS_ALLOW_ALL_ORIGINS = True   
# # CORS_ALLOW_CREDENTIALS = True

# # CORS_ALLOWED_ORIGINS = [
# #     "http://localhost:3000",  # React dev server
# #     "http://127.0.0.1:3000",
# #     "http://localhost:8000",
# #     "http://93.127.206.37:8000",
# #     # Add your bonds URLs here
# # ]
# # CORS_ALLOWED_ORIGINS = [
# #     "http://localhost:3000",      # Local React dev server (default)
# #     "http://127.0.0.1:3000",
# #     "http://93.127.206.37:3040",
# #      "http://127.0.0.1:3040",      
# #     "http://93.127.206.37:4000",  # Production/test frontend on VPS
# #     "http://93.127.206.37:8000",  # API host (optional, if needed)
# # ]


# # CORS_ALLOW_HEADERS = [
# #     'accept',
# #     'accept-encoding',
# #     'authorization',
# #     'content-type',
# #     'dnt',
# #     'origin',
# #     'user-agent',
# #     'x-csrftoken',
# #     'x-requested-with',
# # ]
# #   file upload settings
# FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
# DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# SPECTACULAR_SETTINGS = {
#     "TITLE": "Bond Platform API",
#     "DESCRIPTION": "Bond Platform API Documentation (secured with JWT)",
#     "VERSION": "1.0.0",
#     "SERVE_INCLUDE_SCHEMA": False,
#     "SWAGGER_UI_SETTINGS": {
#         "deepLinking": True,
#         "defaultModelExpandDepth": 2,
#         "defaultModelsExpandDepth": 1,
#         "docExpansion": "none",
#         "persistAuthorization": True,
#         "displayRequestDuration": True,
#     },
#     "COMPONENT_SPLIT_REQUEST": True,
#     "SECURITY": [{"bearerAuth": []}],
#     "COMPONENTS": {
#         "securitySchemes": {
#             "bearerAuth": {
#                 "type": "http",
#                 "scheme": "bearer",
#                 "bearerFormat": "JWT",
#             }
#         }
#     },
# }



"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
from celery.schedules import crontab

import environ

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

APPS_DIR = BASE_DIR / "apps"

local_env_file = os.path.join(BASE_DIR, "envs", ".env.local")

if os.path.isfile(local_env_file):
    load_dotenv(local_env_file)


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "django_countries",
    "phonenumber_field",
    "drf_spectacular",
    "djoser",
    "cloudinary",
    "django_filters",
    # "djcelery_email",
    "django_celery_beat",
    "rest_framework_simplejwt",
    "corsheaders",
]

LOCAL_APPS = [
    "apps.authentication",
    "apps.bonds",
    "apps.compliance", 
    "apps.dashboard",
    "apps.investments",
    "apps.notifications",
    "apps.payments",
    "apps.regulatory",
    "apps.reporting",
    "apps.risk_management",
    "apps.settlement",
    "apps.trading",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# AUTH_USER_MODEL = 'authentication.User'

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.IgnoreBadHostMiddleware",
    "config.middleware.RequestLoggingMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(APPS_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database Configuration with PostgreSQL
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": os.getenv("POSTGRES_DB", "bond_platform"),
#         "USER": os.getenv("POSTGRES_USER", "bond_user"), 
#         "PASSWORD": os.getenv("POSTGRES_PASSWORD", "bond_password"),
#         "HOST": os.getenv("POSTGRES_HOST", "localhost"),
#         "PORT": os.getenv("POSTGRES_PORT", "5432"),
#         "CONN_MAX_AGE": 60,  # Connection pooling
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "bond_platform"),
        "USER": os.getenv("POSTGRES_USER", "bond_user"), 
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "bond_password"),
        "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
        # "OPTIONS": {
        #     'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        # },
        "CONN_MAX_AGE": 60,  # Connection pooling
    }
}

# Fallback to SQLite for development if PostgreSQL is not available
if os.getenv("USE_SQLITE", "False").lower() == "true":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Cache Configuration
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "bond_platform",
        "TIMEOUT": 300,
    },
    "otp": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://127.0.0.1:6379/2"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "otp",
        "TIMEOUT": 600,
    }
}

# Password Hashers
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC
# ------------------------------------------------------------------------------
STATIC_ROOT = str(BASE_DIR / "staticfiles")
STATIC_URL = "/static/"
STATICFILES_DIRS = [str(APPS_DIR / "static")]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# LOGGING
# ------------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}

# Celery
# ------------------------------------------------------------------------------
if USE_TZ:
    CELERY_TIMEZONE = TIME_ZONE

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_TIME_LIMIT = 5 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    # OTP cleanup tasks
    "cleanup-expired-otp-requests": {
        "task": "apps.authentication.tasks.cleanup_expired_otp_requests",
        "schedule": crontab(minute="*/15"),  # Run every 15 minutes
    },
    "cleanup-old-otp-records": {
        "task": "apps.authentication.tasks.cleanup_old_otp_records",
        "schedule": crontab(hour=2, minute=30),  # Run daily at 2:30 AM
        "kwargs": {"days_old": 30},
    },
    "generate-otp-analytics-report": {
        "task": "apps.authentication.tasks.generate_otp_analytics_report",
        "schedule": crontab(hour=8, minute=0),  # Run daily at 8:00 AM
        "kwargs": {"days": 7},
    },
}

# -------------------------
# Django REST Framework
# -------------------------
REST_FRAMEWORK = {
    # Custom JWT authentication from cookies
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "config.authentication.CookieJWTAuthentication",
    ),
    # Render only JSON in production (no BrowsableAPIRenderer)
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # "rest_framework.renderers.BrowsableAPIRenderer",  # Enable only in development
    ],
    # Throttling
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",
        "config.throttling.OpenAPIsThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "5/second",
        "registration_otp": "5/hour",
        "open_apis": "60/minute",
    },
    # Permissions: all APIs require authentication by default
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    # OpenAPI/Schema
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # Custom exception handler
    "EXCEPTION_HANDLER": "config.exceptions.custom_exception_handler",
    # Datetime format
    "DATETIME_FORMAT": "%d-%m-%y %H:%M:%S",
}

# -------------------------
# Simple JWT for cookie-based auth
# -------------------------
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": None,   # Will be set in environment-specific settings
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_REFRESH": "refresh_token", 
    "AUTH_COOKIE_DOMAIN": None,  # Will be set per environment
    "AUTH_COOKIE_SECURE": False, # Will be overridden in production
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "Lax",
}

# -------------------------
# CORS Settings
# -------------------------
# CRITICAL: CORS settings will be configured in environment-specific files
# (local.py, production.py) to allow proper cookie-based authentication

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# DRF Spectacular Settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Bond Platform API",
    "DESCRIPTION": "Bond Platform API Documentation (secured with JWT)",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "defaultModelExpandDepth": 2,
        "defaultModelsExpandDepth": 1,
        "docExpansion": "none",
        "persistAuthorization": True,
        "displayRequestDuration": True,
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "SECURITY": [{"bearerAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
}